# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'beam_display.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import os
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
import laserbeamsize as lbs
import cv2



class Ui_Gaussian(object):
    def setupUi(self, Gaussian):
        Gaussian.setObjectName("Gaussian")
        Gaussian.resize(1087, 542)
        self.DisplayGraph = QtWidgets.QGraphicsView(Gaussian)
        self.DisplayGraph.setGeometry(QtCore.QRect(44, 185, 371, 301))
        self.DisplayGraph.setObjectName("DisplayGraph")
        self.PathImage = QtWidgets.QTextEdit(Gaussian)
        self.PathImage.setGeometry(QtCore.QRect(43, 43, 291, 31))
        self.PathImage.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.PathImage.setObjectName("PathImage")
        self.ShowBeamButton = QtWidgets.QPushButton(Gaussian, clicked=lambda: self.press_it())
        self.ShowBeamButton.setGeometry(QtCore.QRect(41, 115, 161, 28))
        self.ShowBeamButton.setObjectName("ShowBeamButton")
        self.DisplayPath = QtWidgets.QLabel(Gaussian)
        self.DisplayPath.setGeometry(QtCore.QRect(230, 120, 151, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.DisplayPath.setFont(font)
        self.DisplayPath.setCursor(QtGui.QCursor(QtCore.Qt.UpArrowCursor))
        self.DisplayPath.setObjectName("DisplayPath")
        self.lineEdit = QtWidgets.QLineEdit(Gaussian)
        self.lineEdit.setGeometry(QtCore.QRect(390, 50, 113, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(Gaussian)
        self.label.setGeometry(QtCore.QRect(460, 170, 55, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Gaussian)
        self.label_2.setGeometry(QtCore.QRect(460, 210, 55, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Gaussian)
        self.label_3.setGeometry(QtCore.QRect(460, 300, 55, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Gaussian)
        self.label_4.setGeometry(QtCore.QRect(460, 260, 55, 16))
        self.label_4.setObjectName("label_4")
        self.xmin = QtWidgets.QPlainTextEdit(Gaussian)
        self.xmin.setGeometry(QtCore.QRect(510, 160, 104, 31))
        self.xmin.setObjectName("xmin")
        self.xmax = QtWidgets.QPlainTextEdit(Gaussian)
        self.xmax.setGeometry(QtCore.QRect(510, 200, 104, 31))
        self.xmax.setObjectName("xmax")
        self.ymin = QtWidgets.QPlainTextEdit(Gaussian)
        self.ymin.setGeometry(QtCore.QRect(510, 250, 104, 31))
        self.ymin.setObjectName("ymin")
        self.ymax = QtWidgets.QPlainTextEdit(Gaussian)
        self.ymax.setGeometry(QtCore.QRect(510, 290, 104, 31))
        self.ymax.setObjectName("ymax")
        self.DisplayGaussian = QtWidgets.QPushButton(
            Gaussian, clicked=lambda: self.show_gauss())
        self.DisplayGaussian.setGeometry(QtCore.QRect(490, 340, 141, 41))
        self.DisplayGaussian.setObjectName("DisplayGaussian")

        self.retranslateUi(Gaussian)
        QtCore.QMetaObject.connectSlotsByName(Gaussian)

    def retranslateUi(self, Gaussian):
        _translate = QtCore.QCoreApplication.translate
        Gaussian.setWindowTitle(_translate("Gaussian", "Form"))
        self.PathImage.setHtml(_translate("Gaussian", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.ShowBeamButton.setText(_translate("Gaussian", "show me the beam"))
        self.DisplayPath.setText(_translate("Gaussian", "hello world"))
        self.label.setText(_translate("Gaussian", "xmin"))
        self.label_2.setText(_translate("Gaussian", "xmax"))
        self.label_3.setText(_translate("Gaussian", "ymax"))
        self.label_4.setText(_translate("Gaussian", "ymin"))
        self.DisplayGaussian.setText(_translate("Gaussian", "Beam parameter"))

    def press_it(self):
        val = self.PathImage.toPlainText()
        #self.DisplayPath.setText(val)
        #val[8:] if any(val.startswith(x) for x in ('file:///')) else val
        if 'file:///' in val:
            val = val[len('file:///'):]
            print(val)
        beam=   cv2.imread(val, cv2.IMREAD_GRAYSCALE)
        #beam = np.asarray(Image.open(val))
        plt.figure(1)
        plt.imshow(beam)
        plt.show()

    def show_gauss(self):
        val = self.PathImage.toPlainText()
        if 'file:///' in val:
            val = val[len('file:///'):]
        print(val)
        beam = cv2.imread(val, cv2.IMREAD_GRAYSCALE)#np.asarray(Image.open(val))
        xmin =int( self.xmin.toPlainText())
        xmax =int( self.xmax.toPlainText())
        ymin =int( self.ymin.toPlainText())
        ymax = int(self.ymax.toPlainText())
        print(xmin, xmax, ymin, ymax)
        size = 5.86
        selected = beam[ymin:ymax, xmin:xmax]
        x, y, dx, dy, phi = lbs.beam_size(selected)
        print("The center of the beam ellipse is at (%.0f, %.0f)" % (x, y))
        print(f"The ellipse diameter (closest to horizontal) is {dx*size} micron" )
        print(f"The ellipse diameter (closest to   vertical) is {dy*size}micron")
        print("The ellipse is rotated %.0fÂ° ccw from the horizontal" % (phi*180/3.1416))
        plt.figure(2)
        lbs.beam_size_and_plot(selected, pixel_size=size)

        plt.show()
        # c = lbs.beam_size(selected, pixel_size=4.65)
        # print(c)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Gaussian = QtWidgets.QWidget()
    ui = Ui_Gaussian()
    ui.setupUi(Gaussian)
    Gaussian.show()
    sys.exit(app.exec_())
